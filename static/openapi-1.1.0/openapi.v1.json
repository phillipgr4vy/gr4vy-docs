{
  "openapi": "3.0.0",
  "info": {
    "title": "Gr4vy API",
    "version": "1.1.0-beta",
    "contact": {
      "name": "Gr4vy Support",
      "email": "code@gr4vy.com",
      "url": "https://gr4vy.com"
    },
    "termsOfService": "https://gr4vy.com",
    "license": {
      "name": "MIT",
      "url": "https://raw.githubusercontent.com/gr4vy/gr4vy-openapi/main/LICENSE"
    },
    "description": "Welcome to the Gr4vy API reference documentation.\nOur API is still very much a work in product and subject to change."
  },
  "servers": [
    {
      "url": "https://api.{gr4vy_id}.gr4vy.app",
      "variables": {
        "gr4vy_id": {
          "default": "plantly",
          "description": "The subdomain for your Gr4vy instance."
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Buyers",
      "description": "In Gr4vy, a buyer represents your customer, the shopper who's performing\na checkout and making a purchase.\n\nA buyer can be used by you to:\n\n* Display a human readable name (`display_name`) for a buyer in the Gr4vy\nadmin panel\n* Associate multiple tokenized payment methods with a single user\n* Initialize **Gr4vy Embed** with the buyer ID, automatically displaying the\n  buyer's previously stored payment methods, allowing for faster checkout."
    },
    {
      "name": "Payment Method Tokens",
      "description": "In Gr4vy, a payment method token represents the token created by a payment\nservice for a payment method.\n\nThe payment method token API can be used to:\n\n* List all the available tokens for a payment method\n* Use these tokens to make direct API calls to that payment service,\nwithout the need to go through Gr4vy."
    },
    {
      "name": "Payment Methods",
      "description": "In Gr4vy, a payment method represents a way in which a payment can be\nprocessed, for example a card, a PayPal account, or a bank account.\n\nThe payment method API can be used to:\n\n* List all the available payment methods\n* Filter the available payment method for a buyer in a specific currency\nand country.\n* Store (also known as tokenize) a payment method for a buyer.\n* Fetch all previously tokenized payment methods for a buyer."
    },
    {
      "name": "Payment Options",
      "description": "In Gr4vy, a payment option represents a list of methods (card, PayPal,\netc) that are available for a given locale.\n\nThe payment options API can be used to:\n\n* Determine what types of payments can be processed in a specific locale.\n* Display a list options to a buyer to choose from."
    },
    {
      "name": "Payment Service Definitions",
      "description": "Payment service definitions describe the fields required for a payment\nservice to be configured."
    },
    {
      "name": "Payment Services",
      "description": "In Gr4vy, a payment service represents a configured payment provider\n(Stripe, PayPal, Adyen, etc) for a specific payment type (card, bitcoin,\netc)\n\nThe payment services API can be used to:\n\n* Provide Gr4vy with the payment credentials for a payment provider.\n* Set a display name for a payment provider."
    },
    {
      "name": "Transactions",
      "description": "In Gr4vy, a transaction represents a payment in any state, either before it\nis authorized, once it is captured, or after it has been refunded.\n\nThe transactions API can be used to:\n\n- Authorize, capture, and store cards.\n- Authorize, capture, and store alternative payment methods like PayPal.\n- Refund, void, and otherwise cancel existing transactions."
    }
  ],
  "paths": {
    "/buyers": {
      "get": {
        "operationId": "list-buyers",
        "summary": "List buyers",
        "description": "Returns a list of buyers.",
        "tags": [
          "Buyers"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "John"
            },
            "in": "query",
            "name": "search",
            "description": "Filters the results to only the buyers for which the `display_name` or\n`external_identifier` matches this value. This field allows for a partial\nmatch, matching any buyer for which either of the fields partially or\ncompletely matches."
          },
          {
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 1,
              "minimum": 1,
              "maximum": 100,
              "format": "int32"
            },
            "in": "query",
            "name": "limit",
            "description": "Defines the maximum number of items to return for this request."
          },
          {
            "schema": {
              "type": "string",
              "format": "",
              "example": "ZXhhbXBsZTE"
            },
            "in": "query",
            "name": "cursor",
            "description": "A cursor that identifies the page of results to return. This is used to\npaginate the results of this API.\n\nFor the first page of results, this parameter can be left out.\nFor additional pages, use the value returned by the API in\nthe `next_cursor` field. Similarly the `previous_cursor` can be used to\nreverse backwards in the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of buyers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Buyers"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "add-buyer",
        "summary": "New buyer",
        "description": "Adds a buyer, allowing for payment methods and transactions to be associated\nto this buyer.\n",
        "tags": [
          "Buyers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerRequest"
              },
              "examples": {
                "Create a buyer": {
                  "value": {
                    "external_identifier": "412231123",
                    "display_name": "John L."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the buyer that was added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Buyer"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "409": {
            "description": "Returns an error if duplicate resource has been found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409DuplicateRecord"
                }
              }
            }
          }
        }
      }
    },
    "/buyers/{buyer_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "example": "8724fd24-5489-4a5d-90fd-0604df7d3b83"
          },
          "name": "buyer_id",
          "in": "path",
          "required": true,
          "description": "The unique ID for a buyer."
        }
      ],
      "get": {
        "operationId": "get-buyer",
        "summary": "Get buyer",
        "description": "Gets the information about a buyer.",
        "tags": [
          "Buyers"
        ],
        "responses": {
          "200": {
            "description": "Returns the information about a buyer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Buyer"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          },
          "default": {
            "description": "Returns a generic error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGeneric"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-buyer",
        "summary": "Update buyer",
        "description": "Updates a buyer's details.\n",
        "tags": [
          "Buyers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerUpdate"
              },
              "examples": {
                "Update a buyer": {
                  "value": {
                    "external_identifier": "42623266",
                    "display_name": "John D."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated buyer record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Buyer"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-buyer",
        "summary": "Delete buyer",
        "description": "Deletes a buyer record. Any associated tokenized payment methods will remain\nin the system but no longer associated to the buyer.",
        "tags": [
          "Buyers"
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response."
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/buyers/payment-methods": {
      "get": {
        "operationId": "list-buyer-payment-methods",
        "summary": "List stored payment methods for a buyer",
        "description": "Returns a list of stored (tokenized) payment methods for a buyer in a short\ntokenized format. Only payment methods that are compatible with at least one\nactive payment service in that region are shown.",
        "tags": [
          "Payment Methods"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "8724fd24-5489-4a5d-90fd-0604df7d3b83"
            },
            "in": "query",
            "name": "buyer_id",
            "description": "Filters the results to only the items for which the `buyer` has an\n`id` that matches this value."
          },
          {
            "schema": {
              "type": "string",
              "example": "user-12345"
            },
            "in": "query",
            "name": "buyer_external_identifier",
            "description": "Filters the results to only the items for which the `buyer` has an\n`external_identifier` that matches this value."
          },
          {
            "schema": {
              "type": "string",
              "example": "US"
            },
            "in": "query",
            "name": "country",
            "description": "Filters the results to only the items which support this country code. A\ncountry is formatted as 2-letter ISO country code."
          },
          {
            "schema": {
              "type": "string",
              "example": "USD"
            },
            "in": "query",
            "name": "currency",
            "description": "Filters the results to only the items which support this currency code. A\ncurrency is formatted as 3-letter ISO currency code."
          },
          {
            "schema": {
              "type": "string",
              "example": "staging",
              "enum": [
                "development",
                "staging",
                "production"
              ],
              "default": "production"
            },
            "in": "query",
            "name": "environment",
            "description": "Filters the results to only the items available in this environment."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of available payment methods for a buyer, filtered by the\ngiven currency and country code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethods--Tokenized"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/payment-methods": {
      "get": {
        "operationId": "list-payment-methods",
        "summary": "List payment methods",
        "description": "Returns a list of stored (tokenized) payment methods.",
        "tags": [
          "Payment Methods"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "staging",
              "enum": [
                "development",
                "staging",
                "production"
              ],
              "default": "production"
            },
            "in": "query",
            "name": "environment",
            "description": "Filters the results to only the items available in this environment."
          },
          {
            "schema": {
              "type": "string",
              "example": "8724fd24-5489-4a5d-90fd-0604df7d3b83"
            },
            "in": "query",
            "name": "buyer_id",
            "description": "Filters the results to only the items for which the `buyer` has an\n`id` that matches this value."
          },
          {
            "schema": {
              "type": "string",
              "example": "user-12345"
            },
            "in": "query",
            "name": "buyer_external_identifier",
            "description": "Filters the results to only the items for which the `buyer` has an\n`external_identifier` that matches this value."
          },
          {
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 1,
              "minimum": 1,
              "maximum": 100,
              "format": "int32"
            },
            "in": "query",
            "name": "limit",
            "description": "Defines the maximum number of items to return for this request."
          },
          {
            "schema": {
              "type": "string",
              "format": "",
              "example": "ZXhhbXBsZTE"
            },
            "in": "query",
            "name": "cursor",
            "description": "A cursor that identifies the page of results to return. This is used to\npaginate the results of this API.\n\nFor the first page of results, this parameter can be left out.\nFor additional pages, use the value returned by the API in\nthe `next_cursor` field. Similarly the `previous_cursor` can be used to\nreverse backwards in the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of payment methods.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethods"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "store-payment-method",
        "summary": "New payment method",
        "description": "Stores and tokenizes a new payment method.",
        "tags": [
          "Payment Methods"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-model-name": "PaymentMethodRequest",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CardRequest"
                  },
                  {
                    "$ref": "#/components/schemas/RedirectRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created payment method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/payment-methods/{payment_method_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "46973e9d-88a7-44a6-abfe-be4ff0134ff4",
            "format": "uuid"
          },
          "name": "payment_method_id",
          "in": "path",
          "required": true,
          "description": "The ID of the payment method."
        }
      ],
      "get": {
        "operationId": "get-payment-method",
        "summary": "Get stored payment method",
        "description": "Gets the details for a stored payment method.",
        "tags": [
          "Payment Methods"
        ],
        "responses": {
          "200": {
            "description": "Returns a payment method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-payment-method",
        "summary": "Delete payment method",
        "description": "Removes a stored payment method.",
        "tags": [
          "Payment Methods"
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response."
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/payment-methods/{payment_method_id}/tokens": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "46973e9d-88a7-44a6-abfe-be4ff0134ff4",
            "format": "uuid"
          },
          "name": "payment_method_id",
          "in": "path",
          "required": true,
          "description": "The ID of the payment method."
        }
      ],
      "get": {
        "operationId": "list-payment-method-tokens",
        "summary": "List payment method tokens",
        "description": "Returns a list of PSP tokens for a given payment method.",
        "tags": [
          "Payment Method Tokens"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of payment method tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodTokens"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/payment-options": {
      "get": {
        "operationId": "list-payment-options",
        "summary": "List payment options",
        "description": "Returns a list of available payment method options for a currency\nand country.",
        "tags": [
          "Payment Options"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "US"
            },
            "in": "query",
            "name": "country",
            "description": "Filters the results to only the items which support this country code. A\ncountry is formatted as 2-letter ISO country code."
          },
          {
            "schema": {
              "type": "string",
              "example": "USD"
            },
            "in": "query",
            "name": "currency",
            "description": "Filters the results to only the items which support this currency code. A\ncurrency is formatted as 3-letter ISO currency code."
          },
          {
            "schema": {
              "type": "string",
              "example": "staging",
              "enum": [
                "development",
                "staging",
                "production"
              ],
              "default": "production"
            },
            "in": "query",
            "name": "environment",
            "description": "Filters the results to only the items available in this environment."
          },
          {
            "schema": {
              "type": "string",
              "example": "en-US",
              "pattern": "^[a-z]{2}(?:-[A-Z]{2})?$",
              "default": "en-US"
            },
            "in": "query",
            "name": "locale",
            "description": "An ISO 639-1 Language Code and optional ISO 3166 Country Code. This locale\ndetermines the language for the labels returned for every payment option."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of available payment options for the given query\nparameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentOptions"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if  any of the query parameters are not recognised.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/payment-services": {
      "get": {
        "operationId": "list-payment-services",
        "summary": "List payment services",
        "description": "Lists the currently configured and activated payment services.",
        "tags": [
          "Payment Services"
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 1,
              "minimum": 1,
              "maximum": 100,
              "format": "int32"
            },
            "in": "query",
            "name": "limit",
            "description": "Defines the maximum number of items to return for this request."
          },
          {
            "schema": {
              "type": "string",
              "format": "",
              "example": "ZXhhbXBsZTE"
            },
            "in": "query",
            "name": "cursor",
            "description": "A cursor that identifies the page of results to return. This is used to\npaginate the results of this API.\n\nFor the first page of results, this parameter can be left out.\nFor additional pages, use the value returned by the API in\nthe `next_cursor` field. Similarly the `previous_cursor` can be used to\nreverse backwards in the list."
          },
          {
            "schema": {
              "type": "string",
              "example": "card",
              "enum": [
                "card",
                "paypal",
                "banked"
              ]
            },
            "in": "query",
            "name": "method",
            "description": "Filters the results to only the items for which the `method` has been set to\nthis value."
          },
          {
            "schema": {
              "type": "string",
              "example": "staging",
              "enum": [
                "development",
                "staging",
                "production"
              ],
              "default": "production"
            },
            "in": "query",
            "name": "environment",
            "description": "Filters the results to only the items available in this environment."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of payment services.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentServices"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "New payment service",
        "operationId": "add-payment-service",
        "description": "Adds a new payment service by providing a custom name and a value for each of the required fields.",
        "tags": [
          "Payment Services"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentServiceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created payment service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentService"
                },
                "examples": {
                  "Stripe": {
                    "value": {
                      "id": "faaad066-30b4-4997-a438-242b0752d7e1",
                      "type": "payment-service",
                      "payment_service_definition_id": "stripe",
                      "method": "card",
                      "display_name": "Stripe",
                      "status": "pending",
                      "accepted_currencies": [
                        "EUR"
                      ],
                      "accepted_countries": [
                        "DE"
                      ],
                      "environment": "production"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/payment-services/{payment_service_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "46973e9d-88a7-44a6-abfe-be4ff0134ff4"
          },
          "name": "payment_service_id",
          "in": "path",
          "required": true,
          "description": "The ID of the payment service."
        }
      ],
      "get": {
        "operationId": "get-payment-service",
        "summary": "Get payment service",
        "description": "Retrieves the details of a single configured payment service.",
        "tags": [
          "Payment Services"
        ],
        "responses": {
          "200": {
            "description": "Returns a payment service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentService"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-payment-service",
        "summary": "Update payment service",
        "description": "Updates an existing payment service. Allows all fields to be changed except for the service ID.",
        "tags": [
          "Payment Services"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentServiceUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the updated payment service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentService"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-payment-service",
        "summary": "Delete payment service",
        "description": "Deletes a specific active payment service.",
        "tags": [
          "Payment Services"
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response."
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/payment-service-definitions": {
      "get": {
        "operationId": "list-payment-service-definitions",
        "summary": "List payment service definitions",
        "description": "Returns a list of all available payment service definitions.",
        "tags": [
          "Payment Service Definitions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 1,
              "minimum": 1,
              "maximum": 100,
              "format": "int32"
            },
            "in": "query",
            "name": "limit",
            "description": "Defines the maximum number of items to return for this request."
          },
          {
            "schema": {
              "type": "string",
              "format": "",
              "example": "ZXhhbXBsZTE"
            },
            "in": "query",
            "name": "cursor",
            "description": "A cursor that identifies the page of results to return. This is used to\npaginate the results of this API.\n\nFor the first page of results, this parameter can be left out.\nFor additional pages, use the value returned by the API in\nthe `next_cursor` field. Similarly the `previous_cursor` can be used to\nreverse backwards in the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of payment service definitions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentServiceDefinitions"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/payment-service-definitions/{payment_service_definition_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "stripe-card"
          },
          "name": "payment_service_definition_id",
          "in": "path",
          "required": true,
          "description": "The unique ID of the payment service definition."
        }
      ],
      "get": {
        "operationId": "get-payment-service-definition",
        "summary": "Get payment service definition",
        "description": "Gets the definition for a payment service.",
        "tags": [
          "Payment Service Definitions"
        ],
        "responses": {
          "200": {
            "description": "Returns a payment service definition.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentServiceDefinition"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "operationId": "list-transactions",
        "summary": "List transactions",
        "description": "Lists all transactions for an account. Sorted by last `updated_at` status.",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "be828248-56de-481e-a580-44b6e1d4df81"
            },
            "in": "query",
            "name": "search",
            "description": "Filters the transactions to only the items for which the `id` or\n`external_identifier` matches this value. This field allows for a partial\nmatch, matching any transaction for which either of the fields partially or\ncompletely matches."
          },
          {
            "schema": {
              "type": "string",
              "example": "capture_succeeded",
              "enum": [
                "processing",
                "processing_failed",
                "capture_succeeded",
                "capture_pending",
                "capture_declined",
                "capture_failed",
                "authorization_succeeded",
                "authorization_pending",
                "authorization_declined",
                "authorization_failed",
                "authorization_expired",
                "authorization_voided",
                "refund_succeeded",
                "refund_pending",
                "refund_declined",
                "refund_failed",
                "buyer_approval_succeeded",
                "buyer_approval_pending",
                "buyer_approval_declined",
                "buyer_approval_failed",
                "buyer_approval_timedout"
              ]
            },
            "in": "query",
            "name": "transaction_status",
            "description": "Filters the results to only the transactions for which the `status`\nmatches this value."
          },
          {
            "schema": {
              "type": "string",
              "example": "8724fd24-5489-4a5d-90fd-0604df7d3b83"
            },
            "in": "query",
            "name": "buyer_id",
            "description": "Filters the results to only the items for which the `buyer` has an\n`id` that matches this value."
          },
          {
            "schema": {
              "type": "string",
              "example": "user-12345"
            },
            "in": "query",
            "name": "buyer_external_identifier",
            "description": "Filters the results to only the items for which the `buyer` has an\n`external_identifier` that matches this value."
          },
          {
            "schema": {
              "type": "string",
              "example": "2012-12-12T10:53:43+00:00"
            },
            "in": "query",
            "name": "before_created_at",
            "description": "Filters the results to only transactions created before this ISO date-time string."
          },
          {
            "schema": {
              "type": "string",
              "example": "2012-12-12T10:53:43+00:00"
            },
            "in": "query",
            "name": "after_created_at",
            "description": "Filters the results to only transactions created after this ISO date-time string."
          },
          {
            "schema": {
              "type": "string",
              "example": "2012-12-12T10:53:43+00:00"
            },
            "in": "query",
            "name": "before_updated_at",
            "description": "Filters the results to only transactions last updated before this ISO\ndate-time string."
          },
          {
            "schema": {
              "type": "string",
              "example": "2012-12-12T10:53:43+00:00"
            },
            "in": "query",
            "name": "after_updated_at",
            "description": "Filters the results to only transactions last updated after this ISO\ndate-time string."
          },
          {
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 1,
              "minimum": 1,
              "maximum": 500,
              "format": "int32"
            },
            "in": "query",
            "name": "limit",
            "description": "Defines the maximum number of items to return for this request."
          },
          {
            "schema": {
              "type": "string",
              "format": "",
              "example": "ZXhhbXBsZTE"
            },
            "in": "query",
            "name": "cursor",
            "description": "A cursor that identifies the page of results to return. This is used to\npaginate the results of this API.\n\nFor the first page of results, this parameter can be left out.\nFor additional pages, use the value returned by the API in\nthe `next_cursor` field. Similarly the `previous_cursor` can be used to\nreverse backwards in the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of transactions for an account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "New transaction",
        "tags": [
          "Transactions"
        ],
        "operationId": "authorize-new-transaction",
        "description": "Attempts to create an authorization for a payment method. In some cases it is\nnot possible to create the authorization without redirecting the user for\ntheir authorization. In these cases the status is set to\n`buyer_approval_pending` and an `approval_url` is returned.\n\nAdditionally, this endpoint accepts a few additional fields that allow for\nsimultaneous capturing and storage of the payment method.\n\n* `store` - Use this field to store the payment method for\nfuture use. Not all payment methods support this feature.\n* `capture` - Use this method to also perform a capture of the transaction\nafter it has been authorized.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionRequest"
              },
              "examples": {
                "Authorize a new card": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "payment_method": {
                      "method": "card",
                      "number": "4111111111111111",
                      "expiration_date": "11/25",
                      "security_code": "123",
                      "redirect_url": "https://example.com/callback"
                    }
                  }
                },
                "Authorized and tokenize a card": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "store": true,
                    "payment_method": {
                      "method": "card",
                      "number": "4111111111111111",
                      "expiration_date": "11/25",
                      "security_code": "123",
                      "redirect_url": "https://example.com/callback"
                    }
                  }
                },
                "Authorize, capture, and tokenize a card": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "intent": "capture",
                    "store": true,
                    "payment_method": {
                      "method": "card",
                      "number": "4111111111111111",
                      "expiration_date": "11/25",
                      "security_code": "123",
                      "redirect_url": "https://example.com/callback"
                    }
                  }
                },
                "Authorize and capture a PayPal transaction": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "intent": "capture",
                    "payment_method": {
                      "method": "paypal",
                      "redirect_url": "https://example.com/callback"
                    }
                  }
                },
                "Authorize and capture using a previously tokenized card": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "intent": "capture",
                    "payment_method": {
                      "method": "id",
                      "id": "46973e9d-88a7-44a6-abfe-be4ff0134ff4"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transaction_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9"
          },
          "name": "transaction_id",
          "in": "path",
          "required": true,
          "description": "The ID for the transaction to get the information for."
        }
      ],
      "get": {
        "operationId": "get-transaction",
        "summary": "Get transaction",
        "description": "Get information about a transaction.",
        "tags": [
          "Transactions"
        ],
        "responses": {
          "200": {
            "description": "Returns a transaction resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found or has not yet been created.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error404NotFound"
                    },
                    {
                      "$ref": "#/components/schemas/Error404PendingCreation"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transaction_id}/capture": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9"
          },
          "name": "transaction_id",
          "in": "path",
          "required": true,
          "description": "The ID for the transaction to get the information for."
        }
      ],
      "post": {
        "operationId": "capture-transaction",
        "summary": "Capture transaction",
        "description": "Captures a previously authorized transaction.",
        "tags": [
          "Transactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCaptureRequest"
              },
              "examples": {
                "Capture an authorization": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the captured transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found or has not yet been created.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error404NotFound"
                    },
                    {
                      "$ref": "#/components/schemas/Error404PendingCreation"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transaction_id}/refund": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9"
          },
          "name": "transaction_id",
          "in": "path",
          "required": true,
          "description": "The ID for the transaction to get the information for."
        }
      ],
      "post": {
        "operationId": "refund-transaction",
        "summary": "Refund or void transactions",
        "description": "Refunds or voids transaction. If this transaction was already captured, it\nwill issue a refund. If the transaction was not yet captured the authorization\nwill instead be voided.",
        "tags": [
          "Transactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionRefundRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns cancelled transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found or has not yet been created.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error404NotFound"
                    },
                    {
                      "$ref": "#/components/schemas/Error404PendingCreation"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "title": "Address",
        "type": "object",
        "description": "Billing details associated to a buyer.",
        "x-tags": [
          "Buyers"
        ],
        "required": [
          "line1",
          "city",
          "state",
          "postal_code",
          "country"
        ],
        "properties": {
          "city": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "The city for the billing address.",
            "example": "London",
            "nullable": false
          },
          "country": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2,
            "description": "The country for the billing address.",
            "example": "GB",
            "nullable": false
          },
          "postal_code": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "The postal code or zip code for the billing address.",
            "example": "789123",
            "nullable": false
          },
          "state": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "The state, county, or province for the billing address.",
            "example": "Greater London",
            "nullable": false
          },
          "state_code": {
            "type": "string",
            "minLength": 4,
            "maxLength": 6,
            "description": "The code of state, county, or province for the billing address in\nISO 3166-2 format.",
            "example": "GB-LND",
            "nullable": true
          },
          "house_number_or_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "The house number or name for the billing address. Not all payment\nservices use this field but some do.",
            "example": "10",
            "nullable": true
          },
          "line1": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "The first line of the billing address.",
            "example": "10 Oxford Street",
            "nullable": false
          },
          "line2": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "The second line of the billing address.",
            "example": "New Oxford Court",
            "nullable": true
          },
          "organization": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "The optional name of the company or organisation to add\nto the billing address.",
            "example": "Gr4vy",
            "nullable": true
          }
        }
      },
      "AddressUpdate": {
        "title": "Address (Update)",
        "type": "object",
        "x-tags": [
          "Buyers"
        ],
        "required": [
          "organization",
          "house_number_or_name",
          "line1",
          "line2",
          "city",
          "state",
          "postal_code",
          "country"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Address"
          }
        ]
      },
      "BillingDetails": {
        "title": "Billing details request",
        "type": "object",
        "description": "Billing details to use associated to a buyer.",
        "x-tags": [
          "Buyers"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "The first name(s) or given name for the buyer.",
            "example": "John",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "example": "Lunn",
            "description": "The last name, or family name, of the buyer.",
            "nullable": true
          },
          "email_address": {
            "type": "string",
            "minLength": 1,
            "maxLength": 320,
            "description": "The email address for the buyer.",
            "example": "john@example.com",
            "nullable": true
          },
          "phone_number": {
            "type": "string",
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "minLength": 1,
            "maxLength": 50,
            "description": "The phone number to use for this request. This expect the number in the\n[E164 number standard](https://www.twilio.com/docs/glossary/what-e164).",
            "example": "+1234567890",
            "nullable": true
          },
          "address": {
            "description": "The billing address for the buyer.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "tax_id": {
            "description": "The tax information associated with the billing details.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxId"
              }
            ]
          }
        }
      },
      "BillingDetailsUpdateRequest": {
        "title": "Billing Details Update Request",
        "type": "object",
        "x-tags": [
          "Buyers"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BillingDetails"
          }
        ],
        "properties": {
          "address": {
            "description": "Address associated with the billing details.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressUpdate"
              }
            ]
          }
        }
      },
      "Buyer": {
        "title": "Buyer",
        "type": "object",
        "x-tags": [
          "Buyers"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this resource. Is always `buyer`.",
            "example": "buyer",
            "enum": [
              "buyer"
            ]
          },
          "id": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9",
            "description": "The unique Gr4vy ID for this buyer.",
            "format": "uuid"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the buyer against your own records.",
            "example": "user-789123",
            "nullable": true,
            "minLength": 1,
            "maxLength": 200
          },
          "display_name": {
            "type": "string",
            "description": "A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.",
            "example": "John L.",
            "nullable": true,
            "minLength": 1,
            "maxLength": 200
          },
          "billing_details": {
            "description": "The billing details associated with a buyer.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BillingDetails"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "The date and time\nwhen this buyer was created in our system.",
            "format": "date-time",
            "example": "2013-07-16T19:23:00.000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time\nwhen this buyer was last updated in our system.",
            "format": "date-time",
            "example": "2013-07-16T19:23:00.000+00:00"
          }
        }
      },
      "Buyers": {
        "title": "Buyers",
        "type": "object",
        "description": "A list of buyers.",
        "x-tags": [
          "Buyers"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "A list of buyers.",
            "items": {
              "$ref": "#/components/schemas/Buyer"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The limit applied to request. This represents the number of items that are at\nmaximum returned by this request.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "example": 1,
            "default": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": "ZXhhbXBsZTE",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "previous_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": null,
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "Buyer--Snapshot": {
        "title": "Buyer (Snapshot)",
        "type": "object",
        "description": "Snapshot of a buyer, as used when embedded inside other\nresources.",
        "x-tags": [
          "Buyers"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this resource. Is always `buyer`.",
            "example": "buyer",
            "enum": [
              "buyer"
            ]
          },
          "id": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9",
            "description": "The unique Gr4vy ID for this buyer.",
            "format": "uuid"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the buyer against your own records.",
            "example": "user-789123",
            "nullable": true,
            "minLength": 1,
            "maxLength": 200
          },
          "display_name": {
            "type": "string",
            "description": "A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.",
            "example": "John L.",
            "nullable": true,
            "minLength": 1,
            "maxLength": 200
          },
          "billing_details": {
            "description": "The billing details associated with the buyer, which include the address and tax ID.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BillingDetails"
              }
            ]
          }
        }
      },
      "BuyerRequest": {
        "title": "Buyer (Create)",
        "type": "object",
        "description": "A request to create a buyer.",
        "x-tags": [
          "Buyers"
        ],
        "properties": {
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the buyer against your own records. This value needs to be unique for all buyers.",
            "example": "user-789123",
            "nullable": true,
            "minLength": 1,
            "maxLength": 200
          },
          "display_name": {
            "type": "string",
            "description": "A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.",
            "example": "John L.",
            "nullable": true,
            "minLength": 1,
            "maxLength": 200
          },
          "billing_details": {
            "description": "The optional billing details to create a buyer.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BillingDetails"
              }
            ]
          }
        }
      },
      "BuyerUpdate": {
        "title": "Buyer (Update)",
        "type": "object",
        "description": "A request to update a buyer.",
        "x-tags": [
          "Buyers"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BuyerRequest"
          }
        ],
        "properties": {
          "billing_details": {
            "description": "The optional billing details to update a buyer.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BillingDetailsUpdateRequest"
              }
            ]
          }
        }
      },
      "CardRequest": {
        "title": "Card",
        "type": "object",
        "description": "Card details to use in a transaction or to register a new payment method.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "method",
          "number",
          "expiration_date",
          "security_code"
        ],
        "properties": {
          "method": {
            "type": "string",
            "description": "`card`.",
            "example": "card",
            "enum": [
              "card"
            ]
          },
          "number": {
            "type": "string",
            "minLength": 14,
            "maxLength": 16,
            "example": "4111111111111111",
            "pattern": "^[0-9]{14,16}$",
            "description": "The 15-16 digit number for this card as it can be found on the\nfront of the card."
          },
          "expiration_date": {
            "type": "string",
            "description": "The expiration date of the card, formatted `MM/YY`.",
            "example": "11/25",
            "pattern": "^\\d{2}/\\d{2}$",
            "minLength": 5,
            "maxLength": 5
          },
          "security_code": {
            "type": "string",
            "description": "The 3 or 4 digit security code often found on the card. This often\nreferred to as the CVV or CVD.",
            "pattern": "^\\d{3,4}$",
            "minLength": 3,
            "maxLength": 4,
            "example": "123"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the card against your own records.",
            "example": "card-323444",
            "nullable": true
          },
          "buyer_id": {
            "type": "string",
            "format": "uuid",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9",
            "description": "The ID of the buyer to associate this payment method to. If this field is\nprovided then the `buyer_external_identifier` field needs to be unset."
          },
          "buyer_external_identifier": {
            "type": "string",
            "description": "The `external_identifier` of the buyer to associate this payment method\nto. If this field is provided then the `buyer_id` field\nneeds to be unset.",
            "example": "user-789123"
          },
          "environment": {
            "type": "string",
            "description": "Defines the environment to store this card for. Setting this to\nanything other than `production` will force Gr4vy to use the payment\nservices configured for that environment.",
            "enum": [
              "development",
              "staging",
              "production"
            ],
            "example": "staging"
          },
          "redirect_url": {
            "type": "string",
            "format": "uri",
            "description": "The redirect URL to redirect a buyer after a 3D Secure flow\nhas been completed. This will be appended with both a\ntransaction ID and status (e.g. `https://example.com/callback?\ngr4vy_transaction_id=123&gr4vy_transaction_status=capture_succeeded`).\nThis is required if the transaction request body does not\ninclude `three_d_secure_data`.",
            "example": "https://example.com/callback"
          }
        }
      },
      "ErrorGeneric": {
        "title": "Generic Error",
        "type": "object",
        "description": "A generic client error.",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this object. This is always `error`.",
            "enum": [
              "error"
            ],
            "example": "error",
            "default": "error"
          },
          "code": {
            "type": "string",
            "description": "A custom code to further describe the type of error being returned. This code provides further specification within the HTTP `status` code and can be used by a program to define logic based on the error.",
            "example": "incorrect_json"
          },
          "status": {
            "type": "integer",
            "description": "The HTTP status code of this error.",
            "format": "int32",
            "default": 0,
            "minimum": 200,
            "exclusiveMaximum": true,
            "maximum": 600,
            "example": 499
          },
          "message": {
            "type": "string",
            "description": "A human readable message that describes the error. The content of this field should not be used to determine any business logic. ",
            "example": "The request body was not valid JSON."
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.\nNot every error supports more detail.",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "Error400BadRequest": {
        "title": "Bad Request",
        "type": "object",
        "description": "Bad Request (HTTP 400).",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`error`.",
            "enum": [
              "error"
            ],
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "`bad_request`.",
            "example": "bad_request",
            "enum": [
              "bad_request"
            ]
          },
          "status": {
            "type": "integer",
            "description": "`400`.",
            "example": 400,
            "enum": [
              400
            ]
          },
          "message": {
            "type": "string",
            "description": "Describes the fields that are missing or incorrectly formatted in the API\nrequest.",
            "example": "Missing '****' field"
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "Error400IncorrectJson": {
        "title": "Incorrect JSON",
        "type": "object",
        "description": "Incorrect JSON (HTTP 400).",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`error`.",
            "enum": [
              "error"
            ],
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "`incorrect_json`.",
            "example": "incorrect_json",
            "enum": [
              "incorrect_json"
            ]
          },
          "status": {
            "type": "integer",
            "description": "`400`.",
            "example": 400,
            "enum": [
              400
            ]
          },
          "message": {
            "type": "string",
            "description": "Incorrect JSON. The request body could not be parsed as valid JSON.",
            "example": "Incorrect JSON. The request body could not be parsed as valid JSON."
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.\nNot every error supports more detail.",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "Error401Unauthorized": {
        "title": "Unauthorized Error",
        "type": "object",
        "description": "Unauthorized Error (HTTP 401).",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`error`.",
            "enum": [
              "error"
            ],
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "`unauthorized`.",
            "example": "unauthorized",
            "enum": [
              "unauthorized"
            ]
          },
          "status": {
            "type": "integer",
            "description": "`401`.",
            "example": 401,
            "enum": [
              401
            ]
          },
          "message": {
            "type": "string",
            "description": "No valid API authentication found.",
            "example": "No valid API authentication found",
            "enum": [
              "No valid API authentication found"
            ]
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.\nNot every error supports more detail.",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "Error403Forbidden": {
        "title": "Forbidden Error",
        "type": "object",
        "description": "Forbidden Error (HTTP 403).",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`error`.",
            "enum": [
              "error"
            ],
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "`forbidden`.",
            "example": "forbidden",
            "enum": [
              "forbidden"
            ]
          },
          "status": {
            "type": "integer",
            "description": "`403`.",
            "example": 403,
            "enum": [
              403
            ]
          },
          "message": {
            "type": "string",
            "description": "Invalid credentials.",
            "example": "Invalid credentials",
            "enum": [
              "Invalid credentials"
            ]
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.\nNot every error supports more detail.",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "Error404PendingCreation": {
        "title": "Pending Creation Error",
        "type": "object",
        "description": "Pending Creation Error (HTTP 404).",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`error`.",
            "enum": [
              "error"
            ],
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "`pending_creation`.",
            "example": "pending_creation",
            "enum": [
              "pending_creation"
            ]
          },
          "status": {
            "type": "integer",
            "description": "`404`.",
            "example": 404,
            "enum": [
              404
            ]
          },
          "message": {
            "type": "string",
            "description": "The resource is still pending.",
            "example": "The resource is still pending",
            "enum": [
              "The resource is still pending"
            ]
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.\nNot every error supports more detail.",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "Error404NotFound": {
        "title": "Not Found Error",
        "type": "object",
        "description": "Not Found Error (HTTP 404).",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`error`.",
            "enum": [
              "error"
            ],
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "`not_found`.",
            "example": "not_found",
            "enum": [
              "not_found"
            ]
          },
          "status": {
            "type": "integer",
            "description": "`404`.",
            "example": 404,
            "enum": [
              404
            ]
          },
          "message": {
            "type": "string",
            "description": "The resource could not be found.",
            "example": "The resource could not be found",
            "enum": [
              "The resource could not be found"
            ]
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.\nNot every error supports more detail.",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "Error409DuplicateRecord": {
        "title": "Duplicate Record Error",
        "type": "object",
        "description": "Duplicate Record Error (HTTP 409).",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`error`.",
            "enum": [
              "error"
            ],
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "`duplicate_record`.",
            "example": "duplicate_record",
            "enum": [
              "duplicate_record"
            ]
          },
          "status": {
            "type": "integer",
            "description": "`409`.",
            "example": 409,
            "enum": [
              409
            ]
          },
          "message": {
            "type": "string",
            "description": "Further details on the field that triggered the error.",
            "example": "A duplicate ecord exists with this external_identifier value"
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.\nNot every error supports more detail.",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "ErrorDetail": {
        "title": "Error details",
        "description": "Additional detail about the part of a request body that caused an issue.",
        "type": "object",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "location": {
            "type": "string",
            "example": "body",
            "description": "The location where the error caused an issue.",
            "enum": [
              "query",
              "body",
              "path",
              "header"
            ]
          },
          "type": {
            "type": "string",
            "example": "value_error.missing",
            "description": "A unique identifier for the type of error that occurred."
          },
          "pointer": {
            "type": "string",
            "example": "/payment_method/number",
            "description": "The exact item for which the validation did not succeed. This is a JSON\npointer for request bodies, while for query, path, and header parameters\nit is the name of the parameter."
          },
          "message": {
            "type": "string",
            "example": "field required",
            "description": "A human readable message for this error detail."
          }
        }
      },
      "PaymentMethod": {
        "title": "Payment method",
        "description": "A generic payment method.",
        "type": "object",
        "x-tags": [
          "Payment Methods"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`payment-method`.",
            "example": "payment-method",
            "enum": [
              "payment-method"
            ]
          },
          "id": {
            "type": "string",
            "description": "The unique ID of the payment method.",
            "format": "uuid",
            "example": "77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5"
          },
          "status": {
            "type": "string",
            "description": "The state of the payment method.\n\n- `processing` - The payment method is still being stored.\n- `processing_failed` - Storing the payment method did not succeed.\n- `buyer_approval_pending` - Storing the payment method requires\n  the buyer to provide approval. Follow the `approval_url` for next steps.\n- `buyer_approval_declined` - The buyer declined to approve the payment\n  method. This can happen after the buyer has been redirect to the\n  `approval_url`.\n- `buyer_approval_timedout` - The buyer did  not approve the payment\n  method in time. This can happen after the buyer has been redirect to the\n  `approval_url`.\n- `stored` - The payment method is approved and stored with all relevant\n  payment services.\n- `partially_stored` - The payment method is approved and stored with only\n  some of the relevant payment services.\n- `used` - The payment method was used for a transaction once and\n  not stored.",
            "example": "stored",
            "enum": [
              "processing",
              "processing_failed",
              "buyer_approval_pending",
              "buyer_approval_declined",
              "buyer_approval_timedout",
              "stored",
              "partially_stored",
              "used"
            ]
          },
          "method": {
            "type": "string",
            "description": "The type of this payment method.",
            "example": "card",
            "enum": [
              "card",
              "paypal",
              "banked"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "The date and time when this payment method was first created in our\nsystem.",
            "format": "date-time",
            "example": "2013-07-16T19:23:00.000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time when this payment method was last updated in our system.",
            "format": "date-time",
            "example": "2013-07-16T19:23:00.000+00:00"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the payment method\nagainst your own records.",
            "example": "user-789123",
            "nullable": true
          },
          "buyer": {
            "description": "The optional buyer for which this payment method has been stored.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Buyer"
              }
            ]
          },
          "label": {
            "type": "string",
            "description": "A label for the card or the account. For a `paypal` payment method this\nis the user's email address. For a card it is the last 4 digits of the\ncard.",
            "example": "john@example.com",
            "nullable": true
          },
          "scheme": {
            "type": "string",
            "example": null,
            "nullable": true,
            "description": "The scheme of the card. Only applies to card payments."
          },
          "expiration_date": {
            "type": "string",
            "description": "The expiration date for the payment method.",
            "example": null,
            "pattern": "^\\d{2}/\\d{2}$",
            "minLength": 5,
            "maxLength": 5,
            "nullable": true
          },
          "approval_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.{merchant}.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve",
            "description": "The optional URL that the buyer needs to be redirected to to further authorize their payment.",
            "nullable": true
          },
          "environment": {
            "type": "string",
            "example": "production",
            "default": "production",
            "nullable": true,
            "enum": [
              "development",
              "staging",
              "production"
            ],
            "description": "The environment this payment method has been stored for. This will be null\nof the payment method was not stored."
          }
        }
      },
      "PaymentMethod--Tokenized": {
        "title": "Payment Method (Tokenized)",
        "description": "A mini format version of a payment method.",
        "type": "object",
        "x-tags": [
          "Payment Methods"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`payment-method`.",
            "example": "payment-method",
            "enum": [
              "payment-method"
            ]
          },
          "id": {
            "type": "string",
            "description": "The unique ID of the payment method.",
            "format": "uuid",
            "example": "77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5"
          },
          "method": {
            "type": "string",
            "description": "The type of this payment method.",
            "example": "card",
            "enum": [
              "card",
              "paypal",
              "banked"
            ]
          },
          "label": {
            "type": "string",
            "description": "A label for the payment method. For a `card` payment method this is the\nlast 4 digits on the card. For others it would be the email address.",
            "example": "1111"
          },
          "scheme": {
            "type": "string",
            "example": "visa",
            "enum": [
              "visa",
              "mastercard",
              "american-express",
              "diners-club",
              "discover",
              "jcb",
              "unionpay",
              "maestro",
              "elo",
              "mir",
              "hiper",
              "hipercard"
            ],
            "description": "The type of the card, if the payment method is a card.",
            "nullable": true
          },
          "expiration_date": {
            "type": "string",
            "description": "The expiration date for the payment method.",
            "example": "11/25",
            "pattern": "^\\d{2}/\\d{2}$",
            "minLength": 5,
            "maxLength": 5,
            "nullable": true
          },
          "approval_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.{merchant}.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve",
            "description": "The optional URL that the buyer needs to be redirected to to further authorize their payment.",
            "nullable": true
          }
        }
      },
      "PaymentMethods": {
        "title": "Payment Methods",
        "type": "object",
        "description": "A list of stored payment methods.",
        "x-tags": [
          "Payment Methods"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "A list of stored payment methods.",
            "items": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The limit applied to request. This represents the number of items that are at\nmaximum returned by this request.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "example": 1,
            "default": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": "ZXhhbXBsZTE",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "previous_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": null,
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "PaymentMethod--Snapshot": {
        "title": "Payment method (Snapshot)",
        "description": "Snapshot of a payment method, as used when embedded inside other\nresources.",
        "type": "object",
        "x-tags": [
          "Payment Methods"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`payment-method`.",
            "example": "payment-method",
            "enum": [
              "payment-method"
            ]
          },
          "id": {
            "type": "string",
            "description": "The unique ID of the payment method.",
            "format": "uuid",
            "example": "77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5",
            "nullable": true
          },
          "method": {
            "type": "string",
            "description": "The type of this payment method.",
            "example": "card",
            "enum": [
              "card",
              "paypal",
              "banked"
            ]
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the payment method\nagainst your own records.",
            "example": "user-789123",
            "nullable": true
          },
          "label": {
            "type": "string",
            "description": "A label for the payment method. This can be the last 4 digits for a card,\nor the email address for an alternative payment method.",
            "example": "1111"
          },
          "scheme": {
            "type": "string",
            "example": "visa",
            "description": "An additional label used to differentiate different sub-types of a payment\nmethod. Most notably this can include the type of card used in a\ntransaction.",
            "nullable": true
          },
          "expiration_date": {
            "type": "string",
            "description": "The expiration date for this payment method. This is mostly used by cards\nwhere the card might have an expiration date.",
            "example": "11/25",
            "pattern": "^\\d{2}/\\d{2}$",
            "minLength": 5,
            "maxLength": 5,
            "nullable": true
          },
          "approval_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.{merchant}.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve",
            "description": "The optional URL that the buyer needs to be redirected to to further authorize their payment.",
            "nullable": true
          }
        }
      },
      "PaymentMethods--Tokenized": {
        "title": "Payment Methods (Token only)",
        "type": "object",
        "description": "A list of stored payment methods in token format.",
        "x-tags": [
          "Payment Methods"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "A list of stored payment methods in token format.",
            "items": {
              "$ref": "#/components/schemas/PaymentMethod--Tokenized"
            }
          }
        }
      },
      "PaymentMethodToken": {
        "title": "Payment method token",
        "description": "A token for a payment method.",
        "type": "object",
        "x-tags": [
          "Payment Method Tokens"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`payment-method-token`.",
            "example": "payment-method-token",
            "enum": [
              "payment-method-token"
            ]
          },
          "id": {
            "type": "string",
            "description": "The external ID of this payment method as it has been registered with the\npayment service, which can be used directly in combination with the\n`token` without the need to go through Gr4vy for a transaction.\n\nIn some cases this is a different value to the `token` while in others\nthis value is identical. Please see the documentation for the payment\nservice for more details.",
            "example": "cus_4QEiU0VT5E3Whi"
          },
          "token": {
            "type": "string",
            "description": "The token of this payment method as it has been registered with the\npayment service, which can be used directly in combination with the\n`id` without the need to go through Gr4vy for a transaction.\n\nIn some cases this is a different value to the `id` while in others\nthis value is identical. Please see the documentation for the payment\nservice for more details.",
            "example": "tok_1JCNiQ2eZvKYlo2CpvA4ODiD"
          },
          "payment_service": {
            "description": "The payment service used for this transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentService--Snapshot"
              }
            ]
          }
        }
      },
      "PaymentMethodTokens": {
        "title": "Payment Method Tokens",
        "type": "object",
        "description": "A list of tokens for a payment method.",
        "x-tags": [
          "Payment Method Tokens"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "A list of stored tokens for payment methods.",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodToken"
            }
          }
        }
      },
      "PaymentMethodRequest": {
        "title": "Payment method request",
        "type": "object",
        "description": "Payment method details used to. register\na new payment method.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "method"
        ],
        "properties": {
          "method": {
            "type": "string",
            "description": "The method to use for this request.",
            "example": "card",
            "enum": [
              "card",
              "paypal",
              "banked",
              "token"
            ]
          },
          "number": {
            "type": "string",
            "minLength": 14,
            "maxLength": 16,
            "example": "4111111111111111",
            "pattern": "^[0-9]{14,16}$",
            "description": "The 15-16 digit number for this credit card as it can be found on the\nfront of the card.\n\nIf a card has been stored with us previously, this number will represent\nthe unique tokenized card ID provided via our API."
          },
          "expiration_date": {
            "type": "string",
            "description": "The expiration date of the card, formatted `MM/YY`. If a card has been\npreviously stored with us this value is optional.\n\nIf the `number` of this card represents a tokenized card, then this value\nis ignored.",
            "example": "11/15",
            "pattern": "^\\d\\d/\\d\\d$",
            "minLength": 5,
            "maxLength": 5
          },
          "security_code": {
            "type": "string",
            "description": "The 3 or 4 digit security code often found on the card. This often\nreferred to as the CVV or CVD.\n\nIf the `number` of this card represents a tokenized card, then this value\nis ignored.",
            "pattern": "^\\d{3,4}$",
            "minLength": 3,
            "maxLength": 4,
            "example": "123"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the card against your own records.",
            "example": "account-23423423",
            "nullable": true
          },
          "buyer_id": {
            "type": "string",
            "format": "uuid",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9",
            "description": "The ID of the buyer to associate this payment method to. If this field is\nprovided then the `buyer_external_identifier` field needs to be unset."
          },
          "buyer_external_identifier": {
            "type": "string",
            "description": "The `external_identifier` of the buyer to associate this payment method\nto. If this field is provided then the `buyer_id` field\nneeds to be unset.",
            "example": "user-789123"
          },
          "redirect_url": {
            "type": "string",
            "format": "uri",
            "description": "The redirect URL to redirect a buyer to after they have authorized their\ntransaction or payment method. This only applies to payment methods that\nrequire buyer approval.",
            "example": "https://example.com/callback"
          },
          "environment": {
            "type": "string",
            "description": "Defines the environment to store this payment method in. Setting this to\nanything other than `production` will force Gr4vy to use a payment\na service configured for that environment.",
            "enum": [
              "development",
              "staging",
              "production"
            ],
            "example": "staging"
          }
        }
      },
      "PaymentService": {
        "title": "A payment service",
        "type": "object",
        "description": "An active, configured payment service.",
        "x-tags": [
          "Payment Services"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of this payment service.",
            "example": "faaad066-30b4-4997-a438-242b0752d7e1",
            "minLength": 1,
            "maxLength": 200
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "example": "payment-service",
            "enum": [
              "payment-service"
            ]
          },
          "payment_service_definition_id": {
            "type": "string",
            "description": "The ID of the payment service definition used to create this service.\n",
            "example": "stripe-card",
            "minLength": 1,
            "maxLength": 50
          },
          "method": {
            "type": "string",
            "description": "Defines the ID of the payment method that this service handles.",
            "example": "card",
            "enum": [
              "card",
              "paypal",
              "banked"
            ]
          },
          "display_name": {
            "type": "string",
            "description": "The custom name set for this service.",
            "example": "Stripe (Main)",
            "minLength": 1,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "created",
              "failed"
            ],
            "description": "The current status of this service. This will start off as pending, move\nto created, and might eventually move to an error status if and when the\ncredentials are no longer valid.\n"
          },
          "accepted_currencies": {
            "type": "array",
            "description": "A list of currencies for which this service is enabled, in ISO 4217\nthree-letter code format.",
            "minItems": 1,
            "items": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3
            },
            "example": [
              "EUR"
            ]
          },
          "accepted_countries": {
            "type": "array",
            "description": "A list of countries for which this service is enabled, in ISO two-letter\ncode format.",
            "minItems": 1,
            "items": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2
            },
            "example": [
              "DE"
            ]
          },
          "three_d_secure_enabled": {
            "type": "boolean",
            "example": true,
            "default": false,
            "description": "Defines if 3-D Secure is enabled for the service (can only be\nenabled if the payment service definition supports\nthe `three_d_secure_hosted` feature).\nThis does not affect pass through 3-D Secure data."
          },
          "acquirer_bin_visa": {
            "type": "string",
            "maxLength": 11,
            "nullable": true,
            "description": "Acquiring institution identification code for VISA."
          },
          "acquirer_bin_mastercard": {
            "type": "string",
            "maxLength": 11,
            "nullable": true,
            "description": "Acquiring institution identification code for Mastercard."
          },
          "acquirer_bin_amex": {
            "type": "string",
            "maxLength": 11,
            "nullable": true,
            "description": "Acquiring institution identification code for Amex."
          },
          "acquirer_bin_discover": {
            "type": "string",
            "maxLength": 11,
            "nullable": true,
            "description": "Acquiring institution identification code for Discover."
          },
          "acquirer_merchant_id": {
            "type": "string",
            "maxLength": 35,
            "nullable": true,
            "description": "Merchant identifier used in authorisation\nrequests (assigned by the acquirer)."
          },
          "merchant_name": {
            "type": "string",
            "example": "gr4vy",
            "maxLength": 40,
            "nullable": true,
            "description": "Merchant name (assigned by the acquirer)."
          },
          "merchant_country_code": {
            "type": "string",
            "example": "840",
            "pattern": "^\\d{3}$",
            "nullable": true,
            "description": "ISO 3166-1 numeric three-digit country code."
          },
          "merchant_category_code": {
            "type": "string",
            "example": "5045",
            "nullable": true,
            "minLength": 4,
            "maxLength": 4,
            "description": "Merchant category code that describes the business."
          },
          "merchant_url": {
            "type": "string",
            "maxLength": 2048,
            "nullable": true,
            "format": "url",
            "description": "Fully qualified URL of 3-D Secure requestor website or customer care site."
          },
          "credentials_mode": {
            "type": "string",
            "example": "live",
            "enum": [
              "sandbox",
              "live"
            ],
            "default": "live",
            "description": "Defines if the credentials are intended for the service's live API or\nsandbox/test API."
          },
          "active": {
            "type": "boolean",
            "example": true,
            "default": true,
            "description": "Defines if this service is currently active or not."
          },
          "environments": {
            "type": "array",
            "minItems": 0,
            "maxItems": 3,
            "items": {
              "type": "string",
              "enum": [
                "development",
                "staging",
                "production"
              ]
            },
            "example": [
              "production"
            ],
            "default": [
              "production"
            ],
            "description": "Determines the Gr4vy environments in which this service should be\navailable. This can be used in combination with the `environment`\nparameters in the payment method and transaction APIs to route\ntransactions through this service."
          },
          "position": {
            "type": "number",
            "example": 1,
            "description": "The numeric rank of a payment service. Payment services with a lower\nposition value are processed first."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2012-12-12T10:53:43+00:00",
            "description": "The date and time when this service was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2012-12-12T10:53:43+00:00",
            "description": "The date and time when this service was last updated."
          }
        }
      },
      "PaymentService--Snapshot": {
        "title": "A payment service",
        "type": "object",
        "description": "An active, configured payment service.",
        "x-tags": [
          "Payment Services"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of this payment service.",
            "example": "stripe-card-faaad066-30b4-4997-a438-242b0752d7e1",
            "minLength": 1,
            "maxLength": 200
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "example": "payment-service",
            "enum": [
              "payment-service"
            ]
          },
          "payment_service_definition_id": {
            "type": "string",
            "description": "The ID of the payment service definition used to create this service.\n",
            "example": "stripe-card",
            "minLength": 1,
            "maxLength": 50
          },
          "method": {
            "type": "string",
            "description": "Defines the ID of the payment method that this service handles.",
            "example": "card",
            "enum": [
              "card",
              "paypal",
              "banked"
            ]
          }
        }
      },
      "PaymentServices": {
        "title": "A list of active payment services",
        "type": "object",
        "description": "A list of active, configured payment services.",
        "x-tags": [
          "Payment Services"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentService"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The limit applied to request. This represents the number of items that are at\nmaximum returned by this request.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "example": 1,
            "default": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": "ZXhhbXBsZTE",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "previous_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": null,
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "PaymentServiceRequest": {
        "title": "Payment Service (Create)",
        "type": "object",
        "description": "Request body for activating a payment service.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "display_name",
          "payment_service_definition_id",
          "fields",
          "accepted_currencies",
          "accepted_countries"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentServiceUpdate"
          },
          {
            "type": "object",
            "properties": {
              "payment_service_definition_id": {
                "type": "string",
                "description": "The ID of the payment service to use.",
                "example": "stripe-card",
                "minLength": 1,
                "maxLength": 50
              }
            }
          }
        ]
      },
      "PaymentServiceUpdate": {
        "title": "Payment Service (Update)",
        "type": "object",
        "description": "Request body for updating an active payment service.",
        "x-tags": [
          "Request Bodies"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "A custom name for the payment service. This will be shown in the Admin UI.",
            "example": "Stripe (Main)",
            "minLength": 1,
            "maxLength": 50
          },
          "fields": {
            "type": "array",
            "description": "A list of fields, each containing a key-value pair for each field defined by the definition for this payment service e.g. for stripe-card `secret_key` is required and so must be sent with in this field.",
            "items": {
              "type": "object",
              "description": "A field containing a key-value pair for a required field defined by the service for this payment service.",
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the field to set a value for.",
                  "example": "private_key",
                  "minLength": 1,
                  "maxLength": 50
                },
                "value": {
                  "type": "string",
                  "description": "The value of a field to set.",
                  "example": "sk_test_4eC39HqLyjWDarjtT1zdp7dc",
                  "minLength": 1,
                  "maxLength": 1500
                }
              }
            }
          },
          "accepted_countries": {
            "type": "array",
            "description": "A list of countries that this payment service needs to support in ISO two-letter code format.",
            "minItems": 1,
            "items": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2
            },
            "example": [
              "US",
              "GB",
              "DE"
            ]
          },
          "accepted_currencies": {
            "type": "array",
            "description": "A list of currencies that this payment service needs to support in ISO 4217 three-letter code format.",
            "minItems": 1,
            "items": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3
            },
            "example": [
              "EUR",
              "USD",
              "GBP"
            ]
          },
          "three_d_secure_enabled": {
            "type": "boolean",
            "example": true,
            "default": false,
            "description": "Defines if 3-D Secure is enabled for the service (can only be\nenabled if the payment service definition supports\nthe `three_d_secure_hosted` feature).\nThis does not affect pass through 3-D Secure data."
          },
          "acquirer_bin_visa": {
            "type": "string",
            "maxLength": 11,
            "nullable": true,
            "description": "Acquiring institution identification code for VISA."
          },
          "acquirer_bin_mastercard": {
            "type": "string",
            "maxLength": 11,
            "nullable": true,
            "description": "Acquiring institution identification code for Mastercard."
          },
          "acquirer_bin_amex": {
            "type": "string",
            "maxLength": 11,
            "nullable": true,
            "description": "Acquiring institution identification code for Amex."
          },
          "acquirer_bin_discover": {
            "type": "string",
            "maxLength": 11,
            "nullable": true,
            "description": "Acquiring institution identification code for Discover."
          },
          "acquirer_merchant_id": {
            "type": "string",
            "maxLength": 35,
            "nullable": true,
            "description": "Merchant identifier used in authorisation\nrequests (assigned by the acquirer)."
          },
          "merchant_name": {
            "type": "string",
            "example": "gr4vy",
            "maxLength": 40,
            "nullable": true,
            "description": "Merchant name (assigned by the acquirer)."
          },
          "merchant_country_code": {
            "type": "string",
            "example": "840",
            "pattern": "^\\d{3}$",
            "nullable": true,
            "description": "ISO 3166-1 numeric three-digit country code."
          },
          "merchant_category_code": {
            "type": "string",
            "example": "5045",
            "nullable": true,
            "minLength": 4,
            "maxLength": 4,
            "description": "Merchant category code that describes the business."
          },
          "merchant_url": {
            "type": "string",
            "maxLength": 2048,
            "nullable": true,
            "format": "url",
            "description": "Fully qualified URL of 3-D Secure requestor website or customer care site."
          },
          "credentials_mode": {
            "type": "string",
            "example": "live",
            "enum": [
              "sandbox",
              "live"
            ],
            "default": "live",
            "description": "Defines if the credentials are intended for the service's live API or\nsandbox/test API."
          },
          "active": {
            "type": "boolean",
            "example": true,
            "default": true,
            "description": "Defines if this service is currently active or not."
          },
          "environments": {
            "type": "array",
            "minItems": 0,
            "maxItems": 3,
            "items": {
              "type": "string",
              "enum": [
                "development",
                "staging",
                "production"
              ]
            },
            "example": [
              "production"
            ],
            "default": [
              "production"
            ],
            "description": "Determines the Gr4vy environments in which this service should be\navailable. This can be used in combination with the `environment`\nparameters in the payment method and transaction APIs to route\ntransactions through this service."
          },
          "position": {
            "type": "number",
            "example": 1,
            "description": "The numeric rank of a payment service. Payment services with a lower\nposition value are processed first. When a payment services is inserted at\na position, any payment services with the the same value or higher are\nshifted down a position accordingly. When left out, the payment service is\ninserted at the end of the list."
          }
        }
      },
      "PaymentServiceDefinition": {
        "title": "Payment Service Definition",
        "type": "object",
        "description": "An available payment service that can be configured.",
        "x-tags": [
          "Discovery"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the payment service. This is the underlying provider followed by a dash followed by the payment method ID.",
            "example": "stripe-card"
          },
          "type": {
            "type": "string",
            "description": "`payment-service-definition`.",
            "default": "payment-service-definition",
            "example": "payment-service-definition"
          },
          "display_name": {
            "type": "string",
            "description": "The display name of this service.",
            "example": "Stripe"
          },
          "method": {
            "type": "string",
            "description": "The ID of the payment method that this services handles.",
            "example": "card",
            "enum": [
              "card",
              "paypal",
              "banked"
            ]
          },
          "fields": {
            "type": "array",
            "description": "A list of fields that need to be submitted when activating the payment. service.",
            "minItems": 1,
            "items": {
              "type": "object",
              "description": "A single field that needs to be submitted for a payment service when it\nis created.",
              "properties": {
                "key": {
                  "type": "string",
                  "example": "private_api_key",
                  "description": "The key of a field that needs to be submitted."
                },
                "display_name": {
                  "type": "string",
                  "example": "Private API key",
                  "description": "The name to display for a field in the dashboard."
                },
                "required": {
                  "type": "boolean",
                  "example": true,
                  "description": "Defines if this field is required when the service is created."
                },
                "format": {
                  "type": "string",
                  "example": "text",
                  "description": "Defines the type of input that needs to be rendered for this field.",
                  "enum": [
                    "text",
                    "multiline",
                    "number"
                  ]
                }
              }
            }
          },
          "supported_currencies": {
            "type": "array",
            "description": "A list of three-letter ISO currency codes that this service supports.",
            "items": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3
            },
            "minItems": 1,
            "example": [
              "USD",
              "GBP",
              "EUR"
            ]
          },
          "supported_countries": {
            "type": "array",
            "description": "A list of two-letter ISO country codes that this service supports.",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "example": [
              "US",
              "GB",
              "DE"
            ]
          },
          "supported_features": {
            "type": "object",
            "description": "Features supported by the payment definition.",
            "properties": {
              "payment_method_tokenization": {
                "type": "boolean",
                "example": true,
                "description": "Supports storing a payment method via tokenization."
              },
              "three_d_secure_hosted": {
                "type": "boolean",
                "example": true,
                "description": "Supports hosted 3-D Secure with a redirect."
              },
              "three_d_secure_pass_through": {
                "type": "boolean",
                "example": false,
                "description": "Supports passing 3-D Secure data to the underlying processor."
              }
            }
          },
          "icon_url": {
            "type": "string",
            "nullable": true,
            "description": "An icon to display for the payment service.",
            "example": "https://cdn.gr4vy.app/stripe.svg"
          }
        }
      },
      "PaymentServiceDefinitions": {
        "title": "Payment service definitions",
        "type": "object",
        "description": "A list of available payment services definitions.",
        "x-tags": [
          "Discovery"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentServiceDefinition"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The limit applied to request. This represents the number of items that are at\nmaximum returned by this request.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "example": 1,
            "default": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": "ZXhhbXBsZTE",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "previous_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": null,
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "PaymentOption": {
        "title": "Payment option",
        "type": "object",
        "description": "An available payment option for a locale.",
        "x-tags": [
          "Payment Option"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`payment-option`.",
            "example": "payment-option",
            "enum": [
              "payment-option"
            ]
          },
          "method": {
            "type": "string",
            "description": "The type of payment method that is available.",
            "example": "card",
            "enum": [
              "card",
              "paypal",
              "banked"
            ]
          },
          "icon_url": {
            "type": "string",
            "nullable": true,
            "description": "An icon to display for the payment option.",
            "example": "https://cdn.gr4vy.app/card.svg"
          },
          "mode": {
            "type": "string",
            "description": "The mode of how the payment option should be displayed.",
            "example": "card",
            "enum": [
              "card",
              "redirect"
            ]
          },
          "label": {
            "type": "string",
            "description": "A label that describes this payment option. This label is returned in the\nlanguage defined by the `locale` query parameter. The label can be used\nto display a list of payment options to the buyer in their language.",
            "example": "Pay by Card"
          },
          "can_store_payment_method": {
            "type": "boolean",
            "description": "A flag to indicate if storing the payment method is supported."
          }
        }
      },
      "PaymentOptions": {
        "title": "A list of payment options",
        "type": "object",
        "description": "A list of payment options.",
        "x-tags": [
          "Payment Options"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentOption"
            }
          }
        }
      },
      "RedirectRequest": {
        "title": "Redirect Request",
        "type": "object",
        "description": "Request to use a redirect flow in a transaction or to register\na new payment method.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "method",
          "redirect_url"
        ],
        "properties": {
          "method": {
            "type": "string",
            "description": "The method to use, this can be any of the methods that\nsupport redirect requests.",
            "example": "paypal",
            "enum": [
              "paypal",
              "banked",
              "gocardless"
            ]
          },
          "redirect_url": {
            "type": "string",
            "format": "uri",
            "description": "The redirect URL to redirect a buyer to after they have authorized their\ntransaction.",
            "example": "https://example.com/callback"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the account against your own records.",
            "example": "account-23423423",
            "nullable": true
          },
          "buyer_id": {
            "type": "string",
            "format": "uuid",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9",
            "description": "The ID of the buyer to associate this payment method to. If this field is\nprovided then the `buyer_external_identifier` field needs to be unset."
          },
          "buyer_external_identifier": {
            "type": "string",
            "description": "The `external_identifier` of the buyer to associate this payment method\nto. If this field is provided then the `buyer_id` field\nneeds to be unset.",
            "example": "user-789123"
          },
          "environment": {
            "type": "string",
            "description": "Defines the environment to store this payment method in. Setting this to\nanything other than `production` will force Gr4vy to use a payment\na service configured for that environment.",
            "enum": [
              "development",
              "staging",
              "production"
            ],
            "example": "staging"
          }
        }
      },
      "Status": {
        "title": "Status",
        "type": "object",
        "description": "In many cases the Gr4vy API returns asynchronously, kicking off a job to\ncreate an authorization or a transaction, and returning a `Status` object with\nthe ID of the pending object. The ID of this resource can be used to query an\nobjects status, or additionally the client can use Pub/Sub to subscribe to the\ncreation of the pending object.",
        "x-tags": [
          "Statuses"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this object. This is always `status`.",
            "enum": [
              "status"
            ],
            "example": "status"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending"
            ],
            "example": "pending",
            "description": "The status of this resource being created. This is always `pending`."
          },
          "resource_type": {
            "type": "string",
            "description": "The type of the object that is pending.\n",
            "example": "transaction",
            "enum": [
              "transaction",
              "payment-method"
            ]
          },
          "resource_id": {
            "type": "string",
            "format": "uuid",
            "example": "8724fd24-5489-4a5d-90fd-0604df7d3b83",
            "description": "The ID of the object for which this status has been created."
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the record against your own records.",
            "example": "user-789123",
            "nullable": true
          }
        }
      },
      "Statuses": {
        "title": "Statuses",
        "description": "A list of status resources.",
        "type": "object",
        "x-tags": [
          "Statuses"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "A list of authorizations.",
            "items": {
              "$ref": "#/components/schemas/Status"
            }
          }
        }
      },
      "TaxId": {
        "title": "Tax ID",
        "type": "object",
        "description": "The tax ID information associated to a buyer.",
        "x-tags": [
          "Buyers"
        ],
        "required": [
          "kind",
          "value"
        ],
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "The tax ID for the buyer.",
            "example": "12345678931"
          },
          "kind": {
            "type": "string",
            "description": "The kind of tax ID.",
            "example": "gb.vat",
            "enum": [
              "ae.trn",
              "au.abn",
              "br.cnpj",
              "br.cpf",
              "ca.bn",
              "ca.gst_hst",
              "ca.pst_bc",
              "ca.pst_mb",
              "ca.pst_sk",
              "ca.qst",
              "ch.vat",
              "cl.tin",
              "es.cif",
              "eu.vat",
              "gb.vat",
              "hk.br",
              "id.npwp",
              "in.gst",
              "jp.cn",
              "jp.rn",
              "kr.brn",
              "li.uid",
              "mx.rfc",
              "my.frp",
              "my.itn",
              "my.sst",
              "no.vat",
              "nz.gst",
              "ru.inn",
              "ru.kpp",
              "sa.vat",
              "sg.gst",
              "sg.uen",
              "th.vat",
              "tw.vat",
              "us.ein",
              "za.vat"
            ]
          }
        }
      },
      "ThreeDSecureData": {
        "title": "3-D Secure Data",
        "type": "object",
        "required": [
          "cavv",
          "eci",
          "version",
          "directory_response"
        ],
        "properties": {
          "cavv": {
            "type": "string",
            "description": "The cardholder authentication value or AAV.",
            "example": "3q2+78r+ur7erb7vyv66vv8="
          },
          "eci": {
            "type": "string",
            "pattern": "^0?\\d$",
            "minLength": 1,
            "maxLength": 2,
            "description": "The electronic commerce indicator for the 3DS transaction.",
            "example": "05"
          },
          "version": {
            "type": "string",
            "pattern": "^[1-2].?[\\d+.?]{0,3}$",
            "description": "The version of 3-D Secure that was used."
          },
          "directory_response": {
            "type": "string",
            "maxLength": 1,
            "description": "For 3-D Secure version 1, the enrolment response. For 3-D Secure version , the transaction status from the `ARes`.",
            "example": "C"
          }
        }
      },
      "ThreeDSecureDataV1": {
        "title": "3-D Secure Data Version 1",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ThreeDSecureData"
          }
        ],
        "required": [
          "authentication_response",
          "cavv_algorithm",
          "xid"
        ],
        "properties": {
          "authentication_response": {
            "type": "string",
            "maxLength": 1,
            "description": "The authentication response.",
            "example": "Y"
          },
          "cavv_algorithm": {
            "type": "string",
            "maxLength": 1,
            "description": "The CAVV Algorithm used."
          },
          "xid": {
            "type": "string",
            "description": "The transaction identifier."
          }
        }
      },
      "ThreeDSecureDataV2": {
        "title": "3-D Secure Data Version 2",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ThreeDSecureData"
          }
        ],
        "required": [
          "directory_transaction_id"
        ],
        "properties": {
          "authentication_response": {
            "type": "string",
            "maxLength": 1,
            "description": "The transaction status from the challenge result\n(not required for frictionless).",
            "example": "Y"
          },
          "directory_transaction_id": {
            "type": "string",
            "description": "The transaction identifier.",
            "example": "c4e59ceb-a382-4d6a-bc87-385d591fa09d"
          }
        }
      },
      "TokenizedRequest": {
        "title": "Tokenized payment method request",
        "type": "object",
        "description": "Details for a previously tokenized payment method.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "method",
          "id"
        ],
        "properties": {
          "method": {
            "type": "string",
            "description": "`id`.",
            "example": "id",
            "enum": [
              "id"
            ]
          },
          "id": {
            "type": "string",
            "description": "A ID that represents a previously tokenized payment method.\nThis token can represent any type of payment method.",
            "example": "46973e9d-88a7-44a6-abfe-be4ff0134ff4"
          },
          "redirect_url": {
            "type": "string",
            "format": "uri",
            "description": "We strongly recommended providing a `redirect_url` for\nstored cards when 3-D Secure is enabled and `three_d_secure_data`\nis not provided. This will be appended with both a\ntransaction ID and status (e.g. `https://example.com/callback?\ngr4vy_transaction_id=123&gr4vy_transaction_status=capture_succeeded`)\nafter 3-D Secure has completed.",
            "example": "https://example.com/callback"
          }
        }
      },
      "Transaction": {
        "title": "Transaction",
        "type": "object",
        "description": "A transaction record.",
        "x-tags": [
          "Transactions"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this resource. Is always `transaction`.",
            "example": "transaction",
            "enum": [
              "transaction"
            ]
          },
          "id": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9",
            "description": "The unique identifier for this transaction.",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "description": "The status of the transaction being processed. This is different from the\n`status` field in that it represents the status of the transaction at the\npayment processor, not the status of the transaction created in Gr4vy.",
            "example": "processing",
            "enum": [
              "processing",
              "processing_failed",
              "capture_succeeded",
              "capture_pending",
              "capture_declined",
              "capture_failed",
              "authorization_succeeded",
              "authorization_pending",
              "authorization_declined",
              "authorization_failed",
              "authorization_expired",
              "authorization_voided",
              "refund_succeeded",
              "refund_pending",
              "refund_declined",
              "refund_failed",
              "buyer_approval_succeeded",
              "buyer_approval_pending",
              "buyer_approval_declined",
              "buyer_approval_failed",
              "buyer_approval_timedout"
            ]
          },
          "amount": {
            "type": "integer",
            "description": "The authorized amount for this transaction. This can be different than the\nactual captured amount and part of this amount may be refunded.",
            "example": 1299,
            "minimum": 0,
            "maximum": 99999999
          },
          "captured_amount": {
            "type": "integer",
            "description": "The captured amount for this transaction. This can be a part and in some\ncases even more than the authorized amount.",
            "example": 999,
            "minimum": 0,
            "maximum": 99999999
          },
          "refunded_amount": {
            "type": "integer",
            "description": "The refunded amount for this transaction. This can be a part or all of the\ncaptured amount.",
            "example": 100,
            "minimum": 0,
            "maximum": 99999999
          },
          "currency": {
            "type": "string",
            "example": "USD",
            "description": "The currency code for this transaction."
          },
          "payment_method": {
            "description": "The payment method used for this transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod--Snapshot"
              }
            ]
          },
          "buyer": {
            "description": "The buyer used for this transaction.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Buyer--Snapshot"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "The date and time when this transaction was created in our system.",
            "format": "date-time",
            "example": "2013-07-16T19:23:00.000+00:00"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the transaction against your own records.",
            "example": "user-789123",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Defines when the transaction was last updated."
          },
          "payment_service": {
            "description": "The payment service used for this transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentService--Snapshot"
              }
            ]
          },
          "environment": {
            "type": "string",
            "example": "production",
            "default": "production",
            "enum": [
              "development",
              "staging",
              "production"
            ],
            "description": "The environment this transaction has been created in."
          }
        }
      },
      "Transactions": {
        "title": "Transactions",
        "description": "A list of transactions.",
        "type": "object",
        "x-tags": [
          "Transactions"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "A list of transactions.",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The limit applied to request. This represents the number of items that are at\nmaximum returned by this request.",
            "format": "int32",
            "minimum": 1,
            "maximum": 500,
            "example": 1,
            "default": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": "ZXhhbXBsZTE",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "previous_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": null,
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "TransactionsBatchCaptureRequest": {
        "title": "Batch Capture (Create)",
        "type": "object",
        "description": "A request to capture multiple previously authorized transactions.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "amount",
          "currency",
          "transaction_id"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The (partial) amount to capture.\n\nWhen left blank, this will capture the entire amount.",
            "example": 1299,
            "minimum": 0,
            "maximum": 99999999
          },
          "currency": {
            "type": "string",
            "description": "A supported ISO-4217 currency code.\n",
            "example": "USD"
          },
          "external_identifier": {
            "type": "string",
            "example": "user-789123",
            "description": "An external identifier that can be used to match the transaction against your own records."
          },
          "transaction_id": {
            "type": "string",
            "description": "The ID of the transaction to capture."
          }
        }
      },
      "TransactionRequest": {
        "title": "Transaction (Create)",
        "type": "object",
        "description": "A request to create a transaction.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "amount",
          "currency",
          "payment_method"
        ],
        "properties": {
          "amount": {
            "description": "The monetary amount to create an authorization for, in the smallest\ncurrency unit for the given currency, for example `1299` cents to create\nan authorization for `$12.99`.",
            "type": "integer",
            "example": 1299,
            "minimum": 0,
            "maximum": 99999999
          },
          "currency": {
            "type": "string",
            "example": "USD",
            "description": "A supported ISO-4217 currency code."
          },
          "payment_method": {
            "x-model-name": "TransactionPaymentMethodRequest",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CardRequest"
              },
              {
                "$ref": "#/components/schemas/RedirectRequest"
              },
              {
                "$ref": "#/components/schemas/TokenizedRequest"
              }
            ],
            "description": "The optional payment method details to create an authorization for. This field is required for processing a card."
          },
          "store": {
            "type": "boolean",
            "description": "Whether or not to also try and store the payment method with us so that\nit can be used again for future use. This is only supported for payment\nmethods that support this feature.",
            "example": true,
            "default": false
          },
          "intent": {
            "type": "string",
            "description": "Defines the intent of this API call. This determines the desired initial\nstate of the transaction.\n\n* `authorize` - (Default) Optionally approves and then authorizes a\ntransaction but does not capture the funds.\n* `capture` - Optionally approves and then authorizes and captures the\nfunds of the transaction.",
            "default": "authorize",
            "example": "capture",
            "enum": [
              "authorize",
              "capture"
            ]
          },
          "external_identifier": {
            "type": "string",
            "example": "user-789123",
            "description": "An external identifier that can be used to match the transaction against your own records.",
            "nullable": true
          },
          "environment": {
            "type": "string",
            "description": "Defines the environment to create this transaction in. Setting this to\nanything other than `production` will force Gr4vy to use the payment\na service configured for that environment.",
            "enum": [
              "development",
              "staging",
              "production"
            ],
            "example": "staging"
          },
          "three_d_secure_data": {
            "description": "Pass through 3-D Secure data to support external 3-D Secure authorisation.\nIf using an external 3-D Secure provider, you should not pass\na `redirect_url` in the `payment_method` object for a transaction.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecureDataV1"
              },
              {
                "$ref": "#/components/schemas/ThreeDSecureDataV2"
              }
            ]
          }
        }
      },
      "TransactionCaptureRequest": {
        "title": "Capture a transaction",
        "type": "object",
        "description": "A request to capture a transaction.",
        "x-tags": [
          "Request Bodies"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The monetary amount to capture an authorization for, in the smallest\ncurrency unit for the given currency, for example `1299` cents to create\nan authorization for `$12.99`.\n\nWhen omitted blank, this will capture the entire amount.",
            "example": 1299,
            "minimum": 0,
            "maximum": 99999999
          }
        }
      },
      "TransactionRefundRequest": {
        "title": "Refund a transaction",
        "type": "object",
        "description": "A request to refund a transaction.",
        "x-tags": [
          "Request Bodies"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The (partial) amount to refund.\n\nWhen omitted blank, this will refund the entire amount.",
            "example": 1299,
            "minimum": 0,
            "maximum": 99999999
          }
        }
      },
      "TransactionPaymentMethodRequest": {
        "title": "Transaction payment method request",
        "type": "object",
        "description": "Payment method details to use in a transaction or to register\na new payment method.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "method"
        ],
        "properties": {
          "method": {
            "type": "string",
            "description": "The method to use for this request.",
            "example": "card",
            "enum": [
              "card",
              "paypal",
              "banked",
              "token"
            ]
          },
          "number": {
            "type": "string",
            "minLength": 14,
            "maxLength": 16,
            "example": "4111111111111111",
            "pattern": "^[0-9]{14,16}$",
            "description": "The 15-16 digit number for this credit card as it can be found on the\nfront of the card.\n\nIf a card has been stored with us previously, this number will represent\nthe unique tokenized card ID provided via our API."
          },
          "expiration_date": {
            "type": "string",
            "description": "The expiration date of the card, formatted `MM/YY`. If a card has been\npreviously stored with us this value is optional.\n\nIf the `number` of this card represents a tokenized card, then this value\nis ignored.",
            "example": "11/15",
            "pattern": "^\\d\\d/\\d\\d$",
            "minLength": 5,
            "maxLength": 5
          },
          "security_code": {
            "type": "string",
            "description": "The 3 or 4 digit security code often found on the card. This often\nreferred to as the CVV or CVD.\n\nIf the `number` of this card represents a tokenized card, then this value\nis ignored.",
            "pattern": "^\\d{3,4}$",
            "minLength": 3,
            "maxLength": 4,
            "example": "123"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the card against your own records.",
            "example": "user-789123",
            "nullable": true
          },
          "buyer_id": {
            "type": "string",
            "format": "uuid",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9",
            "description": "The ID of the buyer to associate this payment method to. If this field is\nprovided then the `buyer_external_identifier` field needs to be unset."
          },
          "buyer_external_identifier": {
            "type": "string",
            "description": "The `external_identifier` of the buyer to associate this payment method\nto. If this field is provided then the `buyer_id` field\nneeds to be unset.",
            "example": "user-789123"
          },
          "redirect_url": {
            "type": "string",
            "format": "uri",
            "description": "The redirect URL to redirect a buyer to after they have authorized their\ntransaction or payment method. This only applies to payment methods that\nrequire buyer approval.",
            "example": "https://example.com/callback"
          },
          "token": {
            "type": "string",
            "description": "A Gr4vy token that represents a previously tokenized payment method.\nThis token can represent any type of payment method.",
            "example": "77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5"
          }
        }
      },
      "UserRequest": {
        "title": "User (Create)",
        "type": "object",
        "description": "A request to create a user.",
        "x-tags": [
          "Users"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "An external identifier that can be used to match the buyer against your own records. This value needs to be unique for all buyers.",
            "example": "John L.",
            "nullable": false,
            "minLength": 1,
            "maxLength": 1000
          },
          "email_address": {
            "type": "string",
            "description": "A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.",
            "example": "john@example.com",
            "nullable": false,
            "minLength": 1,
            "maxLength": 200
          }
        }
      },
      "SetPasswordRequest": {
        "title": "Set Password (Create)",
        "type": "object",
        "description": "A request to set a password for a user.",
        "x-tags": [
          "Users"
        ],
        "properties": {
          "reset_token": {
            "type": "string",
            "description": "Unique reset token valid for 7 days.",
            "example": "nXyWSHq2r5q_8F1_NXtppEStY7KbBHqwU9T8pdmOQa_LYJxpxxXcjOXL58xpHLy5gh1k6s0Myl3ygA6SnsxIjLXBKO3x1EZX3igq",
            "nullable": false,
            "minLength": 100,
            "maxLength": 100
          },
          "password": {
            "type": "string",
            "description": "The password the user to log in with.",
            "example": "this-is-n0t-a-secure-passw0rd"
          }
        }
      },
      "ResetPasswordRequest": {
        "title": "Reset Password (Create)",
        "type": "object",
        "description": "A request to reset a password for a user.",
        "x-tags": [
          "Users"
        ],
        "properties": {
          "email_address": {
            "type": "string",
            "description": "The email address of the user account to reset.",
            "example": "john@example.com"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ]
}